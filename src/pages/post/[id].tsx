import { type GetServerSideProps, type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "~/server/api/root";
import superjson from "superjson";
import { prisma } from "~/server/db";
import { PageLayout } from "~/components/layout";
import Image from "next/image";
import { LoadingPage } from "~/components/loading";
import { PostView } from "~/components/postview";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { generateSSRHelper } from "~/server/helper/ssrHelper";
dayjs.extend(relativeTime);
const ProfileFeed = (props: { userId: string }) => {
  const { data, isLoading } = api.posts.getPostsByUserId.useQuery({
    userId: props.userId,
  });
  if (isLoading) return <LoadingPage />;
  if (!data || data.length === 0) return <div>User has not posted yet.</div>;
  return (
    <div className="flex flex-col">
      {data.map((fullPost) => (
        <PostView key={fullPost.post.id} {...fullPost} />
      ))}
    </div>
  );
};

const SinglePostPage: NextPage<{ id: string }> = ({ id }) => {
  const { data } = api.posts.getById.useQuery({
    id: id,
  });
  if (!data) return <div>404</div>;
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <PostView {...data} />
      </PageLayout>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const helpers = generateSSRHelper();
  const id = context.params?.id;
  if (typeof id !== "string") throw new Error("no id");
  const username = id.replace("@", "");
  await helpers.posts.getById.prefetch({
    id: id,
  });
  return {
    props: {
      trpcState: helpers.dehydrate(),
      id,
    },
  };
};

export default SinglePostPage;
